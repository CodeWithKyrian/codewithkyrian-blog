name: üõ†Ô∏è Build and Deploy to Production

on:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  DOCKER_COMPOSE_CMD: docker compose -f docker-compose.yml -f docker-compose.ci.yml
  STACK_NAME: spin-production
  SPIN_IMAGE_DOCKERFILE: ghcr.io/codewithkyrian/blog:latest
  SSH_DEPLOY_USER: deploy

jobs:

  composer-build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore composer cache (if available)
        id: composer-vendor-restore
        uses: actions/cache/restore@v4
        with:
          path: vendor/
          key: ${{ runner.os }}-composer-vendor-${{ hashFiles('composer.lock') }}

      - if: ${{ steps.composer-vendor-restore.outputs.cache-hit != 'true' }}
        name: List the composer packages
        continue-on-error: true
        run: |
          $DOCKER_COMPOSE_CMD \
          run \
          php \
          composer show --locked

      - if: ${{ steps.composer-vendor-restore.outputs.cache-hit != 'true' }}
        name: Install Composer dependencies
        run: |
          $DOCKER_COMPOSE_CMD \
          run \
          php \
          composer install --optimize-autoloader --no-interaction --no-progress --no-ansi --ignore-platform-req=ext-exif

      - if: ${{ steps.composer-vendor-restore.outputs.cache-hit != 'true' }}
        name: Upload composer cache
        uses: actions/cache/save@v4
        with:
          path: vendor/
          key: ${{ runner.os }}-composer-vendor-${{ hashFiles('composer.lock') }}

  node-build:
    runs-on: ubuntu-22.04
    needs: composer-build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Restore composer cache
        uses: actions/cache/restore@v4
        id: composer-cache-restore
        with:
          path: vendor/
          fail-on-cache-miss: true
          key: ${{ runner.os }}-composer-vendor-${{ hashFiles('composer.lock') }}

      - name: Check composer cache
        if: steps.composer-cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - name: Restore node_modules cache (if available)
        id: node-modules-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules/
          key: ${{ runner.os }}-node-modules-${{ hashFiles('bun.lockb') }}

      - if: ${{ steps.node-modules-restore.outputs.cache-hit != 'true' }}
        name: Run "bun install"
        run: |
          $DOCKER_COMPOSE_CMD \
          run \
          bun \
          bun install --frozen-lockfile

      - name: Run "bun build"
        run: |
          $DOCKER_COMPOSE_CMD \
          run \
          bun \
          bun run build

      - if: ${{ steps.node-modules-restore.outputs.cache-hit != 'true' }}
        name: Upload node_modules cache
        uses: actions/cache/save@v4
        with:
          path: node_modules/
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}

      - if: ${{ steps.node-modules-restore.outputs.cache-hit != 'true' }}
        name: Upload node_modules cache
        uses: actions/cache/save@v4
        with:
          path: node_modules/
          key: ${{ runner.os }}-node-modules-${{ hashFiles('yarn.lock') }}

      - name: Upload public/build cache
        uses: actions/cache/save@v4
        with:
          path: public/build/
          key: ${{ runner.os }}-public-build-${{ github.sha }}

  docker-build:
    runs-on: ubuntu-22.04
    needs:
      - composer-build
      - node-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Restore composer cache
        uses: actions/cache/restore@v4
        id: composer-cache-restore
        with:
          path: vendor/
          fail-on-cache-miss: true
          key: ${{ runner.os }}-composer-vendor-${{ hashFiles('composer.lock') }}

      - name: Check composer cache
        if: steps.composer-cache-restore.outputs.cache-hit != 'true'
        run: exit 1

      - name: Restore public/build cache
        uses: actions/cache/restore@v4
        id: public-build-restore
        with:
          path: public/build/
          fail-on-cache-miss: true
          key: ${{ runner.os }}-public-build-${{ github.sha }}

      - name: Check public/build cache
        if: steps.public-build-restore.outputs.cache-hit != 'true'
        run: exit 1

      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üî®Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.SPIN_IMAGE_DOCKERFILE }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: docker-build
    runs-on: ubuntu-24.04
    steps:
      - name: Prepare SSH configuration.
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
        shell: bash

      - name: Add SSH key.
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          echo "${{ secrets.SSH_DEPLOY_PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        shell: bash

      - name: Use SSH keyscan to get the public key of the remote server.
        run: |
          ssh-keyscan -p 22 -H ${{ secrets.SSH_REMOTE_HOSTNAME }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
        shell: bash

      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io

      - name: Run Docker Stack deployment via SSH.
        run: |
          docker --log-level debug -H ssh://${{ env.SSH_DEPLOY_USER }}@${{ secrets.SSH_REMOTE_HOSTNAME }}:22 \
            stack deploy --detach=false --with-registry-auth \
            -c docker-compose.yml -c docker-compose.prod.yml \
            ${{ STACK_NAME }} \
            --prune
        shell: bash
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
